// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "cockroachdb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}


model User {
  id          String        @id @unique
  email       String        @unique
  username    String        @unique
  image       String?
  imageKey    String?
  Post        Post[]
  Comment     Comment[]
  Vote        Vote[]
  CommentVote CommentVote[]
  Following   Following[]
  Follower    Follower[]
}

enum VoteType {
  UP
  DOWN
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  comments Comment[]
  votes    Vote[]

  imageUrls Json?

  @@index([authorId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?

  // replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // replyToId String?
  // replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?

  @@index([authorId])
  @@index([postId])
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  type   VoteType

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      VoteType

  @@id([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model Following {
  id     String @id @default(cuid())
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Follower {
  id     String @id @default(cuid())
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
